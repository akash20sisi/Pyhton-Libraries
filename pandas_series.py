# -*- coding: utf-8 -*-
"""Pandas_Series.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zaAKBTsNvRjeyUt2yVrOl3b6rSqaoUNj
"""

import numpy as np
import pandas as pd
from pandas import Series, DataFrame

"""**Introduction to pandas Data Structures**

* To get started with pandas, you will need to get comfortable with its two workhorse
data structures: Series and DataFrame. While they are not a universal solution for
every problem, they provide a solid foundation for a wide variety of data tasks.

**Series**

* A Series is a one-dimensional array-like object containing a sequence of values (of
similar types to NumPy types) of the same type and an associated array of data labels,
called its index.
"""

obj = pd.Series([-11,32,3,54])

obj

"""**The string representation of a Series displayed interactively shows the index on the
left and the values on the right. Since we did not specify an index for the data, a
default one consisting of the integers 0 through N - 1 (where N is the length of the
data) is created. You can get the array representation and index object of the Series via
its array and index attributes, respectively.**
"""

obj.array

obj.index

"""**Often, you’ll want to create a Series with an index identifying each data point with a
label:**
"""

obj2 = pd.Series([9,5,-3,4,89],index  = ["a",'b','c','d','e'])

obj2

obj2.to_dict()

obj2.array

obj2.index

"""**Compared with NumPy arrays, you can use labels in the index when selecting single
values or a set of values:**
"""

obj2['a']

obj2[['a','c','d']]

"""**Using NumPy functions or NumPy-like operations, such as filtering with a Boolean
array, scalar multiplication, or applying math functions, will preserve the index-value
link:**
"""

obj2[obj2>0]

obj2 * 4

np.exp(obj2)

"""**Should you have data contained in a Python dictionary, you can create a Series from
it by passing the dictionary:**
"""

sdata = {"Ohio": 35000, "Texas": 71000, "Oregon": 16000, "Utah": 5000}

obj3 = pd.Series(sdata)

obj3

"""**A Series can be converted back to a dictionary with its to_dict method:**"""

obj3.to_dict()

"""**When you are only passing a dictionary, the index in the resulting Series will respect
the order of the keys according to the dictionary’s keys method, which depends on
the key insertion order. You can override this by passing an index with the dictionary
keys in the order you want them to appear in the resulting Series:**
"""

states = ["California", "Ohio", "Oregon", "Texas"]

obj4 = pd.Series(sdata, index = states)

"""**Here, three values found in sdata were placed in the appropriate locations, but since
no value for "California" was found, it appears as NaN (Not a Number), which is
considered in pandas to mark missing or NA values. Since "Utah" was not included
in states, it is excluded from the resulting object.**
"""

obj4

"""**The isna and notna functions in pandas should be used to detect missing data:**

* Series also has these as instance methods:
"""

obj4.isna()

pd.isna(obj4)

pd.notna(obj4)

obj4.notna()

"""**A useful Series feature for many applications is that it automatically aligns by index
label in arithmetic operations:**
"""

obj3

obj4

obj3 + obj4

obj3 * obj4

"""**Both the Series object itself and its index have a name attribute, which integrates with
other areas of pandas functionality**
"""

obj4.name = "Population"

obj4.index.name = "States"

obj4

"""**A Series’s index can be altered in place by assignment:**"""

obj

obj.index = ["Bob","steve","arya","jon"]

obj

