# -*- coding: utf-8 -*-
"""Pandas_DataFrame.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z4uPDgMzvvYREBikjNagvELEjPAjfz8m
"""

import numpy as np
import pandas as pd
from pandas import Series, DataFrame

"""**DataFrame**

* A DataFrame represents a rectangular table of data and contains an ordered, named
collection of columns, each of which can be a different value type (numeric, string,
Boolean, etc.). The DataFrame has both a row and column index; it can be thought of
as a dictionary of Series all sharing the same index.

"""

data = {"state": ["Ohio", "Ohio", "Ohio", "Nevada", "Nevada", "Nevada"],
 "year": [2000, 2001, 2002, 2001, 2002, 2003],
 "pop": [1.5, 1.7, 3.6, 2.4, 2.9, 3.2]}

frame = DataFrame(data)

frame

"""**For large DataFrames, the head method selects only the first five rows:**"""

frame.head()

"""**Similarly, tail returns the last five rows:**"""

frame.tail()

"""**If you specify a sequence of columns, the DataFrame’s columns will be arranged in
that order:**
"""

frame1 = pd.DataFrame(data, columns = ["year","state","pop"],index = ["k","b","c","d","e","f"])

frame1

"""**If you pass a column that isn’t contained in the dictionary, it will appear with missing
values in the result:**
"""

frame2 = pd.DataFrame(data, columns = ["year","state",'pop',"debt"])

frame2.columns

"""**A column in a DataFrame can be retrieved as a Series either by dictionary-like
notation or by using the dot attribute notation:**
"""

frame2["state"]

frame2.year

frame2.loc[1]

frame2.iloc[1]

"""**Columns can be modified by assignment. For example, the empty debt column could
be assigned a scalar value or an array of values:**
"""

frame2["debt"] = 2

frame2

frame2["debt"] = [1,2,3,4,5,6]

frame2

frame2["debt"] = np.arange(6)

frame2

"""**The del keyword will delete columns like with a dictionary. As an example, I first add
a new column of Boolean values where the state column equals "Ohio**
"""

frame2["eastern"] = frame2.state == "Ohio"

frame2

del frame2["eastern"]

frame2.columns

"""**Another common form of data is a nested dictionary of dictionaries:**"""

populations = {"Ohio": {2000: 1.5, 2001: 1.7, 2002: 3.6}, "Nevada": {2001: 2.4, 2002: 2.9}}

frame3 = pd.DataFrame(populations)

frame3.T

"""**Index Objects
pandas’s Index objects are responsible for holding the axis labels (including a Data‐
Frame’s column names) and other metadata (like the axis name or names). Any array
or other sequence of labels you use when constructing a Series or DataFrame is
internally converted to an Index**
"""

obj = pd.Series(np.arange(3), index=["a", "b", "c"])

index = obj.index

index

index[1:]

index[1]

"""**Index objects are immutable and thus can’t be modified by the user:**"""

# index[1] = "d"

labels = pd.Index(np.arange(3))

obj2  = pd.Series([1.3,5.4,8.7], index  = labels)

obj2

